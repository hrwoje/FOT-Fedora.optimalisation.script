#!/bin/bash

# --- Configuratie ---
LOG_FILE="/var/log/fedora_optimization.log"
DNF_FLAGS="-y"
KEEP_KERNELS=2
MINICONDA_INSTALL_DIR_SUFFIX="miniconda3"
AUTHOR="H Dabo" # Auteur naam
MESA_GIT_COPR="gloriouseggroll/mesa-git" # !! VOORBEELD COPR - GEBRUIKER MOET VERIFIËREN/AANPASSEN !!

# --- Kleur Definities ---
COLOR_RESET='\033[0m'; COLOR_RED='\033[0;31m'; COLOR_GREEN='\033[0;32m'; COLOR_YELLOW='\033[0;33m'; COLOR_BLUE='\033[0;34m'; COLOR_MAGENTA='\033[0;35m'; COLOR_CYAN='\033[0;36m'; COLOR_WHITE='\033[0;37m'; COLOR_BOLD_WHITE='\033[1;37m'; COLOR_BOLD_BLUE='\033[1;34m'; COLOR_BOLD_YELLOW='\033[1;33m'; COLOR_BOLD_CYAN='\033[1;36m'; COLOR_BOLD_RED='\033[1;31m';
COLOR_BORDER="${COLOR_BLUE}"; COLOR_TITLE="${COLOR_BOLD_WHITE}"; COLOR_SECTION_HEADER="${COLOR_CYAN}"; COLOR_OPTION_NUMBER="${COLOR_YELLOW}"; COLOR_OPTION_TEXT="${COLOR_WHITE}"; COLOR_PROMPT="${COLOR_BOLD_CYAN}"

# --- Hulpfuncties ---
print_message() { local type="$1" message="$2" color_code; case "$type" in info) color_code=$COLOR_BLUE;; success) color_code=$COLOR_GREEN;; warning) color_code=$COLOR_YELLOW;; error) color_code=$COLOR_RED;; *) color_code=$COLOR_RESET;; esac; echo -e "${color_code}[${type^^}] ${message}${COLOR_RESET}"; }
log_action() { local func="$2" action="$1" status="${3:-Uitgevoerd}"; echo "$(date '+%Y-%m-%d %H:%M:%S') - [$func] $action - Status: $status" | sudo tee -a "$LOG_FILE" > /dev/null; }
log_and_error() { local func="$1" message="$2"; print_message error "$message"; log_action "$message" "$func" "Mislukt"; }
check_root() { if [[ $EUID -ne 0 ]]; then print_message error "Script vereist root (sudo)."; exit 1; fi; sudo touch "$LOG_FILE" || { print_message error "Kon logbestand niet aanmaken."; exit 1; }; sudo chmod 640 "$LOG_FILE"; }
ask_confirmation() { local message="${1:-Weet u zeker dat u wilt doorgaan?}"; echo -e "${COLOR_PROMPT}${message} [j/N]: ${COLOR_RESET}\c"; read response; if [[ ! "$response" =~ ^[jJ](a|A)?$ ]]; then print_message warning "Actie geannuleerd."; return 1; fi; return 0; }
is_gnome_desktop() { if [[ "$XDG_CURRENT_DESKTOP" == *"GNOME"* ]] || [[ "$GDMSESSION" == *"gnome"* ]]; then return 0; else if ps -e | grep -q -E 'gnome-session|gnome-shell'; then return 0; fi; fi; return 1; }
run_gsettings_as_user() { local user="${SUDO_USER:-$(whoami)}" schema="$1" key="$2" value="$3"; local runtime_dir; runtime_dir=$(sudo -u "$user" printenv XDG_RUNTIME_DIR); if [[ -z "$runtime_dir" ]] || [[ ! -e "${runtime_dir}/bus" ]]; then print_message warning "Kon geen actieve D-Bus sessie vinden voor gebruiker '$user'. Kan gsettings niet uitvoeren."; return 1; fi; if sudo -u "$user" DBUS_SESSION_BUS_ADDRESS="unix:path=${runtime_dir}/bus" gsettings set "$schema" "$key" "$value"; then return 0; else print_message error "Kon gsettings niet uitvoeren: set $schema $key $value"; return 1; fi; }

# --- Menu Tekenfuncties ---
draw_line() { local l="$1" m="$2" r="$3"; local w; w=$(tput cols 2>/dev/null || echo 80); [[ $w -lt 40 ]] && w=40; local line=""; line+="${l}"; for (( i=1; i<w-1; i++ )); do line+="${m}"; done; line+="${r}"; echo -e "${COLOR_BORDER}${line}${COLOR_RESET}"; }
print_header() { local t="$1"; local w; w=$(tput cols 2>/dev/null || echo 80); [[ $w -lt 40 ]] && w=40; local tl=${#t}; local p=$(( (w-tl-2)/2 )); local ps; printf -v ps '%*s' "$p" ''; draw_line "╭" "─" "╮"; echo -e "${COLOR_BORDER}│${COLOR_TITLE}${ps}${t}${ps}${COLOR_BORDER}${COLOR_RESET}\c"; if (( (w-tl-2)%2 != 0 )); then echo -e " \c"; fi; echo -e "│${COLOR_RESET}"; draw_line "├" "─" "┤"; }
print_menu_item() { local n="$1" d="$2"; local w; w=$(tput cols 2>/dev/null || echo 80); [[ $w -lt 40 ]] && w=40; local dw=$(( w-2-7 )); if (( ${#d} > dw )); then d="${d:0:$((dw-3))}..."; fi; printf "${COLOR_BORDER}│ ${COLOR_OPTION_NUMBER}[%3s]${COLOR_RESET} ${COLOR_OPTION_TEXT}%-${dw}s ${COLOR_BORDER}│${COLOR_RESET}\n" "$n" "$d"; }
print_section_header() { local h="$1"; local w; w=$(tput cols 2>/dev/null || echo 80); [[ $w -lt 40 ]] && w=40; local hl=${#h}; local p=$(( (w-hl-4)/2 )); local ps; printf -v ps '%*s' "$p" ''; echo -e "${COLOR_BORDER}│${ps}${COLOR_SECTION_HEADER} ${h} ${ps}${COLOR_BORDER}${COLOR_RESET}\c"; if (( (w-hl-4)%2 != 0 )); then echo -e " \c"; fi; echo -e "│${COLOR_RESET}"; }
print_separator() { draw_line "├" "─" "┤"; }
print_footer() { local w; w=$(tput cols 2>/dev/null || echo 80); [[ $w -lt 40 ]] && w=40; local author_text="Auteur: ${AUTHOR}"; local al=${#author_text}; local p=$(( (w-al-2)/2 )); local ps; printf -v ps '%*s' "$p" ''; draw_line "├" "─" "┤"; echo -e "${COLOR_BORDER}│${ps}${COLOR_CYAN}${author_text}${ps}${COLOR_BORDER}${COLOR_RESET}\c"; if (( (w-al-2)%2 != 0 )); then echo -e " \c"; fi; echo -e "│${COLOR_RESET}"; draw_line "╰" "─" "╯"; }


# --- Optimalisatiefuncties (1 t/m 32) ---

# 1. Systeem Update & Essentiële Pakketten
update_system() { local FUNC_NAME="update_system"; print_message info "Systeem bijwerken & essentiële tools installeren..."; if ! sudo dnf ${DNF_FLAGS} update; then log_and_error "$FUNC_NAME" "Fout bij 'dnf update'."; return 1; fi; log_action "Systeem update" "$FUNC_NAME"; if ! sudo dnf ${DNF_FLAGS} install dnf-plugins-core fedora-workstation-repositories util-linux-user curl wget unzip p7zip vim nano ncdu cabextract git; then log_and_error "$FUNC_NAME" "Fout bij installeren essentiële pakketten."; return 1; fi; print_message success "Systeem en essentiële pakketten bijgewerkt/geïnstalleerd."; log_action "Essentiële pakketten installatie" "$FUNC_NAME"; return 0; }

# 2. RPM Fusion Repositories
enable_rpmfusion() { local FUNC_NAME="enable_rpmfusion"; print_message info "RPM Fusion repositories inschakelen (free en nonfree)..."; local rpmf_free=0; local rpmf_nonfree=0; local repo_changed=0; if ! dnf repolist | grep -q "rpmfusion-free-updates"; then if sudo dnf ${DNF_FLAGS} install "https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm"; then rpmf_free=1; repo_changed=1; log_action "RPM Fusion Free geïnstalleerd" "$FUNC_NAME"; else log_and_error "$FUNC_NAME" "Kon RPM Fusion Free niet installeren."; return 1; fi; else print_message info "RPM Fusion Free al ingeschakeld."; rpmf_free=1; fi; if ! dnf repolist | grep -q "rpmfusion-nonfree-updates"; then if sudo dnf ${DNF_FLAGS} install "https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm"; then rpmf_nonfree=1; repo_changed=1; log_action "RPM Fusion Nonfree geïnstalleerd" "$FUNC_NAME"; else print_message warning "Kon RPM Fusion Nonfree niet installeren."; log_action "RPM Fusion Nonfree installatie" "$FUNC_NAME" "Mislukt (Warning)"; fi; else print_message info "RPM Fusion Nonfree al ingeschakeld."; rpmf_nonfree=1; fi; if [[ "$repo_changed" -eq 1 ]]; then print_message info "DNF metadata bijwerken..."; if ! sudo dnf makecache ${DNF_FLAGS}; then print_message warning "Kon DNF cache niet vernieuwen."; log_action "DNF makecache" "$FUNC_NAME" "Mislukt (Warning)"; fi; sudo dnf groupupdate core ${DNF_FLAGS} >/dev/null 2>&1; fi; print_message success "RPM Fusion repositories gecontroleerd/ingeschakeld."; if [[ "$rpmf_nonfree" -eq 0 ]]; then print_message warning "RPM Fusion Nonfree is niet actief. NVIDIA drivers of MS Fonts zijn niet beschikbaar."; fi; return 0; }

# 3. Multimedia Codecs & Hardware Acceleratie Drivers
install_codecs() { local FUNC_NAME="install_codecs"; print_message info "Multimedia codecs (audio/video/beeld) en VA-drivers installeren..."; local rpmf_free_active=0; if dnf repolist | grep -q "rpmfusion-free-updates"; then rpmf_free_active=1; else print_message warning "RPM Fusion Free niet actief. Extra codecs (*-freeworld) worden overgeslagen."; fi; local pkgs="gstreamer1-plugins-base gstreamer1-plugins-good gstreamer1-plugins-ugly gstreamer1-plugins-bad-free gstreamer1-libav lame\* intel-media-driver libheif mesa-dri-drivers mesa-vulkan-drivers mesa-libGLU"; if [[ "$rpmf_free_active" -eq 1 ]]; then print_message info "Toevoegen van *-freeworld pakketten..."; pkgs="$pkgs gstreamer1-plugins-bad-freeworld mesa-va-drivers-freeworld libheif-freeworld"; fi; print_message info "Installeren/updaten specifieke codec pakketten..."; if ! sudo dnf ${DNF_FLAGS} install $pkgs --allowerasing; then log_and_error "$FUNC_NAME" "Fout bij installeren multimedia codecs."; return 1; fi; print_message success "Multimedia codecs en VA-API drivers geïnstalleerd/bijgewerkt."; log_action "Codecs/VA-API installatie (specifieke pkgs)" "$FUNC_NAME"; return 0; }

# 4. Printerondersteuning & Optimalisatie Info
install_printer_support() { local FUNC_NAME="install_printer_support"; print_message info "Printerondersteuning installeren (CUPS, drivers, kleurbeheer)..."; local pkgs="cups system-config-printer gutenprint gutenprint-cups cups-filters foomatic-db* hplip libsane-hpaio colord"; if ! sudo dnf ${DNF_FLAGS} install $pkgs; then log_and_error "$FUNC_NAME" "Fout bij installeren printerondersteuning pakketten."; return 1; fi; log_action "Printer pakketten geïnstalleerd" "$FUNC_NAME"; local cups_restarted=0; if ! systemctl is-enabled cups.service > /dev/null 2>&1; then if ! sudo systemctl enable --now cups.service; then log_and_error "$FUNC_NAME" "Kon CUPS service niet inschakelen/starten."; else print_message success "CUPS service ingeschakeld en gestart."; log_action "CUPS service enabled/started" "$FUNC_NAME"; cups_restarted=1; fi; else print_message info "CUPS service al ingeschakeld."; if ! sudo systemctl restart cups.service; then log_and_error "$FUNC_NAME" "Kon CUPS service niet herstarten."; else log_action "CUPS service herstart" "$FUNC_NAME"; cups_restarted=1; fi; fi; if command -v firewall-cmd > /dev/null 2>&1 && systemctl is-active firewalld > /dev/null 2>&1; then sudo firewall-cmd --permanent --add-service=ipp > /dev/null 2>&1; sudo firewall-cmd --permanent --add-service=mdns > /dev/null 2>&1; sudo firewall-cmd --permanent --add-service=sane > /dev/null 2>&1; log_action "Firewall regels toegevoegd (ipp, mdns, sane)" "$FUNC_NAME"; fi; print_message success "Printerondersteuning basis geïnstalleerd."; print_message info "*** Belangrijk voor Printkwaliteit ***"; print_message info " Check Print Dialoog (Resolutie, Kwaliteit, Media Type). Gebruik system-config-printer."; print_message info " Voor kleurbeheer: installeer/selecteer ICC profielen."; log_action "Printkwaliteit info getoond" "$FUNC_NAME"; [[ $cups_restarted -eq 1 ]] && return 0 || return 1; }

# 5. HDR Ondersteuning (Informatief & Wayland Check)
check_hdr_support() { local FUNC_NAME="check_hdr_support"; print_message info "HDR Ondersteuning Info & Wayland Check"; print_message info "Vereist: HDR Scherm, GPU, Drivers, *Wayland Sessie*, DE."; print_message info "Controleer Scherminstellingen voor HDR optie."; local session_type="${XDG_SESSION_TYPE:-Unset}"; print_message info "Huidige sessie type (XDG_SESSION_TYPE): $session_type"; if [[ "$session_type" == "wayland" ]]; then print_message success "Wayland sessie actief."; log_action "HDR Check (Wayland: Actief)" "$FUNC_NAME"; elif [[ "$session_type" == "x11" ]]; then print_message error "X11 sessie actief! Wayland is nodig voor goede HDR ondersteuning."; log_action "HDR Check (Wayland: NIET Actief - X11)" "$FUNC_NAME"; else print_message warning "Sessie type onbekend/niet Wayland ($session_type). HDR waarschijnlijk niet optimaal."; log_action "HDR Check (Wayland: Onbekend/Niet Wayland - $session_type)" "$FUNC_NAME"; fi; return 0; }

# 6. SSD Optimalisatie (TRIM)
optimize_ssd() { local FUNC_NAME="optimize_ssd"; print_message info "SSD optimalisatie (fstrim timer)..."; if ! systemctl list-unit-files | grep -q fstrim.timer; then log_and_error "$FUNC_NAME" "fstrim.timer unit niet gevonden."; return 1; fi; if ! systemctl is-enabled fstrim.timer > /dev/null 2>&1; then if ! sudo systemctl enable --now fstrim.timer; then log_and_error "$FUNC_NAME" "Kon fstrim.timer niet inschakelen/starten."; return 1; fi; print_message success "fstrim.timer ingeschakeld en gestart."; log_action "fstrim.timer ingeschakeld" "$FUNC_NAME"; else print_message info "fstrim.timer is al ingeschakeld."; log_action "fstrim.timer al actief gecontroleerd" "$FUNC_NAME"; fi; return 0; }

# 7. Netwerk Optimalisatie (TCP BBR + fq_codel)
optimize_network() { local FUNC_NAME="optimize_network"; print_message info "Netwerk optimalisatie (TCP BBR en fq_codel)..."; local sysctl_conf="/etc/sysctl.d/99-network-optimize.conf"; local apply_bbr=0; if sudo sysctl net.ipv4.tcp_available_congestion_control | grep -q "bbr"; then apply_bbr=1; else print_message warning "TCP BBR module niet beschikbaar. Overslaan BBR."; log_action "BBR niet beschikbaar" "$FUNC_NAME"; fi; local changes_made=0; local write_ok=1; if ! grep -Fxq "net.core.default_qdisc=fq_codel" "$sysctl_conf" 2>/dev/null; then print_message info "Instellen: net.core.default_qdisc=fq_codel"; if ! echo "net.core.default_qdisc=fq_codel" | sudo tee -a "$sysctl_conf" > /dev/null; then log_and_error "$FUNC_NAME" "Kon fq_codel niet toevoegen."; write_ok=0; else changes_made=1; fi; else print_message info "net.core.default_qdisc=fq_codel al ingesteld."; fi; if [[ $apply_bbr -eq 1 ]] && ! grep -Fxq "net.ipv4.tcp_congestion_control=bbr" "$sysctl_conf" 2>/dev/null; then print_message info "Instellen: net.ipv4.tcp_congestion_control=bbr"; if ! echo "net.ipv4.tcp_congestion_control=bbr" | sudo tee -a "$sysctl_conf" > /dev/null; then log_and_error "$FUNC_NAME" "Kon bbr niet toevoegen."; write_ok=0; else changes_made=1; fi; else if [[ $apply_bbr -eq 1 ]]; then print_message info "net.ipv4.tcp_congestion_control=bbr al ingesteld."; fi; fi; if [[ $write_ok -eq 0 ]]; then return 1; fi; if [[ $changes_made -eq 1 ]]; then print_message info "Netwerk sysctl instellingen toepassen..."; if ! sudo sysctl -p "$sysctl_conf"; then log_and_error "$FUNC_NAME" "Fout bij toepassen sysctl."; return 1; fi; print_message success "Netwerkinstellingen toegepast/bijgewerkt."; log_action "Netwerk sysctl toegepast/bijgewerkt" "$FUNC_NAME"; else print_message info "Netwerk optimalisaties lijken al aanwezig."; sudo sysctl -p "$sysctl_conf" > /dev/null 2>&1; log_action "Netwerk sysctl al aanwezig" "$FUNC_NAME"; fi; return 0; }

# 8. Driver & Firmware Beheer
update_drivers_firmware() { local FUNC_NAME="update_drivers_firmware"; print_message info "Controleren op driver- en firmware-updates..."; print_message info "Zorgen dat systeem up-to-date is..."; if ! sudo dnf ${DNF_FLAGS} update; then log_and_error "$FUNC_NAME" "DNF update mislukt"; return 1; fi; log_action "Systeem update voor drivers/fw" "$FUNC_NAME"; print_message info "Firmware controleren met fwupd..."; if ! command -v fwupdmgr > /dev/null 2>&1; then print_message warning "fwupdmgr niet gevonden. Installeren..."; if ! sudo dnf ${DNF_FLAGS} install fwupd; then log_and_error "$FUNC_NAME" "Installatie fwupd mislukt"; return 1; fi; log_action "fwupd geïnstalleerd" "$FUNC_NAME"; fi; if ! sudo fwupdmgr refresh --force; then print_message warning "fwupdmgr refresh mislukt."; fi; local updates_available; updates_available=$(sudo fwupdmgr get-updates 2>/dev/null | grep -i 'upgrade available'); if [[ -n "$updates_available" ]]; then print_message warning "Firmware updates beschikbaar!"; sudo fwupdmgr get-updates; if ask_confirmation "Firmware updates nu installeren?"; then if ! sudo fwupdmgr update -y; then log_and_error "$FUNC_NAME" "Fout bij installeren firmware updates."; return 1; fi; print_message success "Firmware updates geïnstalleerd. Herstart kan nodig zijn."; log_action "Firmware update geïnstalleerd" "$FUNC_NAME"; else print_message info "Firmware update overgeslagen."; log_action "Firmware update overgeslagen" "$FUNC_NAME"; return 1; fi; elif sudo fwupdmgr get-devices 2>/dev/null | grep -q .; then print_message success "Geen firmware updates gevonden via fwupd."; log_action "Geen firmware updates" "$FUNC_NAME"; else print_message info "Geen fwupd apparaten/updates gevonden."; log_action "Geen fwupd apparaten/updates" "$FUNC_NAME"; fi; print_message success "Driver- en firmware check voltooid."; return 0; }

# 9. Automatische GPU Driver Installatie
install_gpu_drivers() { local FUNC_NAME="install_gpu_drivers"; print_message info "GPU detecteren en drivers installeren/controleren..."; local GPU_VENDOR_LSPCI; GPU_VENDOR_LSPCI=$(lspci | grep -E 'VGA|3D' | head -n 1 | grep -o -E 'NVIDIA|AMD|Intel'); local result=0; case "$GPU_VENDOR_LSPCI" in "NVIDIA") print_message info "NVIDIA GPU gedetecteerd."; if ! command -v nvidia-smi > /dev/null 2>&1; then print_message warning "NVIDIA drivers lijken niet geïnstalleerd."; if ! enable_rpmfusion; then log_and_error "$FUNC_NAME" "Kon RPM Fusion niet inschakelen (vereist)."; return 1; fi; if ! dnf repolist | grep -q "rpmfusion-nonfree-updates"; then log_and_error "$FUNC_NAME" "RPM Fusion Nonfree vereist, maar niet actief."; return 1; fi; print_message info "Proberen NVIDIA drivers te installeren (akmod)..."; if ! sudo dnf ${DNF_FLAGS} install akmod-nvidia xorg-x11-drv-nvidia-cuda; then log_and_error "$FUNC_NAME" "Fout bij installeren NVIDIA drivers."; result=1; else print_message success "NVIDIA drivers (akmod) geïnstalleerd."; print_message warning "Wacht evt tot module gebouwd is. HERSTART AANBEVOLEN."; log_action "NVIDIA akmod geïnstalleerd" "$FUNC_NAME"; fi; else print_message success "NVIDIA drivers lijken al geïnstalleerd."; log_action "NVIDIA al geïnstalleerd" "$FUNC_NAME"; fi ;; "AMD") print_message info "AMD GPU gedetecteerd."; print_message success "Open source AMDGPU drivers (kernel/Mesa) gebruikt."; print_message info "Zorg dat Mesa/VA-API up-to-date zijn (opties 1, 3, 8)."; log_action "AMD drivers gecontroleerd" "$FUNC_NAME";; "Intel") print_message info "Intel GPU gedetecteerd."; print_message success "Open source Intel drivers (kernel/Mesa) gebruikt."; print_message info "Zorg dat Mesa/intel-media-driver up-to-date zijn (opties 1, 3, 8)."; log_action "Intel drivers gecontroleerd" "$FUNC_NAME";; *) print_message warning "Kon GPU vendor niet eenduidig detecteren."; lspci | grep -E 'VGA|3D'; log_action "Onbekende GPU" "$FUNC_NAME";; esac; return $result; }

# 10. DNS Optimalisatie
optimize_dns() { local FUNC_NAME="optimize_dns"; print_message info "DNS optimaliseren (Cloudflare + Google fallback) via NetworkManager..."; local nm_conf_dir="/etc/NetworkManager/conf.d"; local nm_conf_file="${nm_conf_dir}/99-custom-dns.conf"; if ! command -v nmcli > /dev/null 2>&1; then log_and_error "$FUNC_NAME" "NetworkManager (nmcli) niet gevonden."; return 1; fi; if grep -Eq "^\s*\[main\]" /etc/NetworkManager/NetworkManager.conf && grep -Eq "^\s*dns\s*=\s*none" /etc/NetworkManager/NetworkManager.conf; then print_message warning "NetworkManager beheert DNS niet (dns=none). Overslaan."; log_action "NM dns=none, overgeslagen" "$FUNC_NAME"; return 1; fi; print_message info "DNS instellen in $nm_conf_file..."; sudo mkdir -p "$nm_conf_dir"; if ! echo -e "[main]\ndns=1.1.1.1,1.0.0.1,8.8.8.8,8.8.4.4" | sudo tee "$nm_conf_file" > /dev/null; then log_and_error "$FUNC_NAME" "Kon $nm_conf_file niet schrijven."; return 1; fi; print_message info "NetworkManager herladen..."; if ! sudo systemctl reload NetworkManager; then log_and_error "$FUNC_NAME" "Fout bij herladen NetworkManager."; return 1; fi; print_message success "DNS ingesteld via NetworkManager."; log_action "DNS ingesteld via NM" "$FUNC_NAME"; return 0; }

# 11. Installatie Handige Pakketten
install_extra_packages() { local FUNC_NAME="install_extra_packages"; print_message info "Installeren van handige extra pakketten (incl. btrfs-assistant)..."; local extra_pkgs="preload fuse-libs fuse-exfat fish btrfs-assistant"; if is_gnome_desktop; then extra_pkgs="$extra_pkgs gnome-tweaks"; print_message info "(GNOME gedetecteerd, gnome-tweaks wordt ook geïnstalleerd)"; fi; if ! sudo dnf ${DNF_FLAGS} install $extra_pkgs; then log_and_error "$FUNC_NAME" "Fout bij installeren extra pakketten."; return 1; fi; local preload_ok=1; if command -v preload > /dev/null 2>&1; then if ! systemctl is-enabled preload.service > /dev/null 2>&1; then if ! sudo systemctl enable --now preload.service; then log_and_error "$FUNC_NAME" "Kon preload service niet starten/inschakelen."; preload_ok=0; else print_message success "Preload service ingeschakeld."; log_action "Preload ingeschakeld" "$FUNC_NAME"; fi; else print_message info "Preload service was al ingeschakeld."; sudo systemctl restart preload.service; log_action "Preload herstart" "$FUNC_NAME"; fi; fi; if [[ $preload_ok -eq 1 ]]; then print_message success "Extra pakketten geïnstalleerd."; log_action "Extra pakketten geïnstalleerd" "$FUNC_NAME"; return 0; else return 1; fi; }

# 12. Fish als Standaard Shell Instellen
set_fish_shell() { local FUNC_NAME="set_fish_shell"; print_message info "Fish shell als standaard instellen..."; if ! command -v fish > /dev/null 2>&1; then log_and_error "$FUNC_NAME" "Fish shell niet gevonden (installeer via optie 11)."; return 1; fi; local fish_path; fish_path=$(which fish); local current_user=${SUDO_USER:-$(whoami)}; local current_shell; current_shell=$(getent passwd "$current_user" | cut -d: -f7); if [[ "$current_shell" == "$fish_path" ]]; then print_message info "Fish is al standaard shell voor '$current_user'."; log_action "Al standaard shell" "$FUNC_NAME"; return 0; fi; if ! grep -Fxq "$fish_path" /etc/shells; then print_message info "Fish toevoegen aan /etc/shells..."; if ! echo "$fish_path" | sudo tee -a /etc/shells > /dev/null; then log_and_error "$FUNC_NAME" "Kon /etc/shells niet aanpassen."; return 1; fi; log_action "Toegevoegd aan /etc/shells" "$FUNC_NAME"; fi; print_message warning "Shell wijzigen voor gebruiker: $current_user"; if ! ask_confirmation "Stel '$fish_path' in als standaard shell voor '$current_user'?"; then log_action "Shell wijzigen geannuleerd" "$FUNC_NAME"; return 1; fi; if ! sudo usermod -s "$fish_path" "$current_user"; then log_and_error "$FUNC_NAME" "Kon shell niet wijzigen voor '$current_user'."; return 1; fi; print_message success "Fish ingesteld als standaard shell voor '$current_user'. Log opnieuw in."; log_action "Shell ingesteld op Fish" "$FUNC_NAME"; return 0; }

# 13. Firewall Optimalisatie
optimize_firewall() { local FUNC_NAME="optimize_firewall"; print_message info "Firewall optimaliseren (firewalld)..."; if ! command -v firewall-cmd > /dev/null 2>&1; then print_message info "firewalld niet gevonden. Installeren..."; if ! sudo dnf ${DNF_FLAGS} install firewalld; then log_and_error "$FUNC_NAME" "Kon firewalld niet installeren."; return 1; fi; if ! sudo systemctl enable --now firewalld; then log_and_error "$FUNC_NAME" "Kon firewalld niet starten/inschakelen."; return 1; fi; log_action "firewalld geïnstalleerd" "$FUNC_NAME"; elif ! systemctl is-active firewalld > /dev/null 2>&1; then print_message warning "firewalld niet actief. Starten..."; if ! sudo systemctl start firewalld; then log_and_error "$FUNC_NAME" "Kon firewalld niet starten."; return 1; fi; sudo systemctl enable firewalld; log_action "firewalld gestart" "$FUNC_NAME"; fi; local default_zone; default_zone=$(sudo firewall-cmd --get-default-zone); print_message info "Standaard zone: $default_zone"; print_message info "Essentiële services toevoegen/controleren (zone: $default_zone)..."; local services_to_add=("ssh" "dhcpv6-client" "mdns" "samba-client" "ipp" "ipp-client" "sane"); local added_count=0; local error_adding=0; for service in "${services_to_add[@]}"; do if ! sudo firewall-cmd --permanent --zone="$default_zone" --query-service="$service" > /dev/null 2>&1; then if ! sudo firewall-cmd --permanent --zone="$default_zone" --add-service="$service" > /dev/null 2>&1; then print_message error "Kon service '$service' niet toevoegen."; error_adding=1; else ((added_count++)); fi; fi; done; if [[ $error_adding -eq 1 ]]; then log_action "Fout bij toevoegen firewall services." "$FUNC_NAME" "Mislukt (Warning)"; fi; if [[ $added_count -gt 0 ]]; then print_message info "$added_count service(s) toegevoegd aan firewall."; log_action "$added_count services toegevoegd" "$FUNC_NAME"; else print_message info "Benodigde services al aanwezig in firewall."; log_action "Services al aanwezig" "$FUNC_NAME"; fi; print_message info "Server component poorten controleren (COMMENTAAR IN SCRIPT AANPASSEN INDIEN NODIG)..."; print_message info "Firewall herladen..."; if ! sudo firewall-cmd --reload; then log_and_error "$FUNC_NAME" "Fout bij herladen firewall."; return 1; fi; print_message success "Firewall regels bijgewerkt en herladen."; log_action "Firewall herladen" "$FUNC_NAME"; return 0; }

# 14. GNOME Desktop Optimalisatie
optimize_gnome_desktop() { local FUNC_NAME="optimize_gnome_desktop"; print_message info "GNOME Desktop optimaliseren..."; if ! is_gnome_desktop; then print_message warning "GNOME niet gedetecteerd. Overslaan."; log_action "Geen GNOME, overgeslagen" "$FUNC_NAME"; return 1; fi; local result=0; print_message info "Zorg voor up-to-date grafische drivers (Optie 8 & 9)."; print_message info "Controleren/installeren van GNOME Tweaks..."; if ! command -v gnome-tweaks > /dev/null 2>&1; then if ! sudo dnf ${DNF_FLAGS} install gnome-tweaks; then log_and_error "$FUNC_NAME" "Kon GNOME Tweaks niet installeren."; result=1; fi; log_action "GnomeTweaks geïnstalleerd" "$FUNC_NAME"; else print_message info "GNOME Tweaks al geïnstalleerd."; log_action "GnomeTweaks al geïnstalleerd" "$FUNC_NAME"; fi; local current_animations_enabled; current_animations_enabled=$(GSETTINGS_BACKEND=dummy gsettings get org.gnome.desktop.interface enable-animations 2>/dev/null || echo "true"); print_message info "Optioneel: Animaties uitschakelen (huidig: $current_animations_enabled)"; if [[ "$current_animations_enabled" == "true" ]]; then if ask_confirmation "GNOME animaties uitschakelen?"; then if ! run_gsettings_as_user "org.gnome.desktop.interface" "enable-animations" "false"; then log_and_error "$FUNC_NAME" "Kon animaties niet uitschakelen."; result=1; else print_message success "GNOME animaties uitgeschakeld."; log_action "Animaties uitgeschakeld" "$FUNC_NAME"; fi; else log_action "Animaties behouden (geannuleerd)" "$FUNC_NAME"; result=1; fi; else print_message info "GNOME animaties al uitgeschakeld."; log_action "Animaties al uit" "$FUNC_NAME"; fi; [[ $result -eq 0 ]] && print_message success "GNOME optimalisatie check voltooid."; return $result; }

# 15. Belangrijke Fonts Installeren
install_fonts() { local FUNC_NAME="install_fonts"; print_message info "Belangrijke fonts installeren (MS Core, Noto, etc.)..."; local rpmf_nonfree_active=0; if dnf repolist | grep -q "rpmfusion-nonfree-updates"; then rpmf_nonfree_active=1; fi; local fonts_to_install="google-noto-fonts-all dejavu-sans-fonts dejavu-serif-fonts dejavu-sans-mono-fonts liberation-fonts fira-code-fonts"; if [[ "$rpmf_nonfree_active" -eq 1 ]]; then print_message info "Toevoegen van MS Core Fonts..."; fonts_to_install="$fonts_to_install mscore-fonts-all"; else print_message warning "RPM Fusion Nonfree niet actief. MS Core Fonts overgeslagen."; fi; if [[ "$rpmf_nonfree_active" -eq 1 ]] && ! command -v cabextract > /dev/null 2>&1; then print_message info "Installeren 'cabextract' (vereist voor MS fonts)..."; sudo dnf ${DNF_FLAGS} install cabextract || log_action "Cabextract installatie mislukt" "$FUNC_NAME" "Mislukt (Warning)"; fi; print_message info "Installeren van font pakketten..."; if ! sudo dnf ${DNF_FLAGS} install $fonts_to_install; then log_and_error "$FUNC_NAME" "Fout bij installeren van fonts."; return 1; fi; print_message success "Fonts geïnstalleerd."; print_message info "Font cache bijwerken..."; sudo fc-cache -f -v > /dev/null; log_action "Fonts geïnstalleerd & fc-cache" "$FUNC_NAME"; print_message warning "LET OP: macOS/Android fonts (behalve Noto) NIET geïnstalleerd ivm licenties."; return 0; }

# 16. Conda (Miniconda) Installeren
install_conda() { local FUNC_NAME="install_conda"; local target_user=${SUDO_USER:-$(whoami)}; local target_home; target_home=$(eval echo ~$target_user); local miniconda_path="${target_home}/${MINICONDA_INSTALL_DIR_SUFFIX}"; local miniconda_script="/tmp/miniconda_installer.sh"; print_message info "Miniconda installeren voor gebruiker: $target_user in $miniconda_path"; if [[ -d "$miniconda_path" ]]; then print_message warning "Directory '$miniconda_path' bestaat al."; if ! ask_confirmation "Overslaan? (j=Ja, n=Probeer opnieuw)"; then log_action "Opnieuw proberen ondanks bestaande map" "$FUNC_NAME"; else log_action "Installatie overgeslagen, map bestaat" "$FUNC_NAME"; return 1; fi; fi; if ! command -v curl > /dev/null 2>&1; then log_and_error "$FUNC_NAME" "'curl' niet geïnstalleerd. Kan niet downloaden."; return 1; fi; print_message info "Downloaden Miniconda installer..."; local miniconda_url="https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh"; if ! curl -sSL "$miniconda_url" -o "$miniconda_script"; then log_and_error "$FUNC_NAME" "Downloaden Miniconda installer mislukt."; rm -f "$miniconda_script"; return 1; fi; print_message info "Miniconda installeren (batch modus)..."; local install_success=0; if sudo -u "$target_user" bash "$miniconda_script" -b -p "$miniconda_path"; then install_success=1; print_message success "Miniconda geïnstalleerd in $miniconda_path"; local conda_bin="${miniconda_path}/bin/conda"; if [[ -x "$conda_bin" ]]; then print_message info "Uitvoeren 'conda init' voor bash, zsh, fish..."; sudo -u "$target_user" "$conda_bin" init bash > /dev/null 2>&1; sudo -u "$target_user" "$conda_bin" init zsh > /dev/null 2>&1; sudo -u "$target_user" "$conda_bin" init fish > /dev/null 2>&1; print_message info "Start nieuwe shell om Conda te gebruiken."; log_action "Miniconda geïnstalleerd & init" "$FUNC_NAME"; else print_message warning "Conda binary niet gevonden. 'conda init' overgeslagen."; log_action "Geïnstalleerd maar init mislukt" "$FUNC_NAME"; fi; else log_and_error "$FUNC_NAME" "Miniconda installatie script mislukt."; fi; rm -f "$miniconda_script"; [[ $install_success -eq 1 ]] && return 0 || return 1; }

# 17. Papirus Icons Installeren & Configureren
install_papirus_icons() { local FUNC_NAME="install_papirus_icons"; print_message info "Installeren Papirus Icon Theme en papirus-folders..."; print_message info "Installeren papirus-icon-theme pakket..."; if ! sudo dnf ${DNF_FLAGS} install papirus-icon-theme; then log_and_error "$FUNC_NAME" "Kon papirus-icon-theme pakket niet installeren."; return 1; fi; log_action "papirus-icon-theme pakket geïnstalleerd" "$FUNC_NAME"; local papirus_folders_repo="https://github.com/PapirusDevelopmentTeam/papirus-folders.git"; local tmp_dir; tmp_dir=$(mktemp -d); print_message info "Klonen van papirus-folders naar $tmp_dir..."; if ! git clone --depth 1 "$papirus_folders_repo" "$tmp_dir"; then log_and_error "$FUNC_NAME" "Kon papirus-folders repository niet klonen."; rm -rf "$tmp_dir"; return 1; fi; log_action "papirus-folders gekloond" "$FUNC_NAME"; cd "$tmp_dir" || { log_and_error "$FUNC_NAME" "Kon niet naar $tmp_dir gaan."; rm -rf "$tmp_dir"; return 1; }; print_message info "Uitvoeren papirus-folders install.sh..."; if ! sudo ./install.sh; then log_and_error "$FUNC_NAME" "papirus-folders install.sh mislukt."; cd ..; rm -rf "$tmp_dir"; return 1; fi; log_action "papirus-folders install.sh uitgevoerd" "$FUNC_NAME"; cd ..; rm -rf "$tmp_dir"; local target_user=${SUDO_USER:-$(whoami)}; print_message info "Toepassen kleur 'orange' voor gebruiker '$target_user' (theme Papirus-Dark)..."; if ! command -v papirus-folders > /dev/null 2>&1; then print_message warning "Commando 'papirus-folders' niet gevonden. Kleur niet ingesteld."; log_action "papirus-folders commando niet gevonden" "$FUNC_NAME" "Mislukt (Warning)"; else if ! sudo -u "$target_user" papirus-folders -C orange --theme Papirus-Dark; then print_message warning "Kon papirus-folders kleur niet instellen voor '$target_user'."; log_action "papirus-folders kleur instellen mislukt" "$FUNC_NAME" "Mislukt (Warning)"; else print_message success "Papirus map kleur ingesteld op oranje (voor Papirus-Dark)."; print_message info "Selecteer Papirus-Dark thema handmatig in Tweaks/Instellingen."; log_action "papirus-folders kleur ingesteld" "$FUNC_NAME"; fi; fi; return 0; }

# 18. PC Speaker Beep Uitschakelen
disable_pc_beep() { local FUNC_NAME="disable_pc_beep"; local conf_file="/etc/modprobe.d/nobeep.conf"; local rule="blacklist pcspkr"; print_message info "PC speaker beep uitschakelen..."; if grep -Fxq "$rule" "$conf_file" 2>/dev/null; then print_message info "PC speaker lijkt al uitgeschakeld in $conf_file."; log_action "Al uitgeschakeld" "$FUNC_NAME"; else print_message info "Regel '$rule' toevoegen aan $conf_file..."; if ! echo "$rule" | sudo tee "$conf_file" > /dev/null; then log_and_error "$FUNC_NAME" "Kon $conf_file niet schrijven."; return 1; fi; print_message success "PC speaker uitgeschakeld. Actief na herstart of 'sudo modprobe -r pcspkr'."; log_action "Uitgeschakeld via modprobe conf" "$FUNC_NAME"; fi; return 0; }

# 19. Slaapstand/Suspend Uitschakelen
disable_sleep_suspend() { local FUNC_NAME="disable_sleep_suspend"; print_message warning "*** SLAAPSTAND/SUSPEND UITSCHAKELEN ***"; echo -e "${COLOR_BOLD_RED}WAARSCHUWING:${COLOR_YELLOW} Voorkomt slaapstand/hibernate. Batterij snel leeg / dataverlies bij stroomuitval!"; echo -e "${COLOR_RESET}"; if ! ask_confirmation "ALLE slaap/suspend/hibernate functies uitschakelen?"; then log_action "Actie geannuleerd door gebruiker" "$FUNC_NAME"; return 1; fi; print_message info "Maskeren sleep, suspend, hibernate, hybrid-sleep targets..."; local targets=("sleep.target" "suspend.target" "hibernate.target" "hybrid-sleep.target"); local masked_count=0; local error_count=0; for target in "${targets[@]}"; do if ! sudo systemctl mask "$target"; then if systemctl status "$target" 2>&1 | grep -q 'masked'; then print_message info "$target was al gemaskeerd."; else print_message error "Kon $target niet maskeren."; ((error_count++)); fi; else ((masked_count++)); fi; done; if [[ $error_count -eq 0 ]]; then print_message success "Slaapstand/suspend targets gemaskeerd ($masked_count nieuwe)."; log_action "Slaap/suspend targets gemaskeerd" "$FUNC_NAME"; return 0; else log_and_error "$FUNC_NAME" "$error_count target(s) konden niet gemaskeerd worden."; return 1; fi; }

# 20. GNOME Idle Delay Aanpassen
configure_gnome_idle() { local FUNC_NAME="configure_gnome_idle"; print_message info "GNOME Idle Delay aanpassen (scherm uitschakelen)..."; if ! is_gnome_desktop; then print_message warning "GNOME niet gedetecteerd. Overslaan."; log_action "Geen GNOME, overgeslagen" "$FUNC_NAME"; return 1; fi; local idle_delay_seconds=1800; print_message info "Instellen idle-delay op $idle_delay_seconds seconden ($((idle_delay_seconds/60)) minuten)."; if ! run_gsettings_as_user "org.gnome.desktop.session" "idle-delay" "$idle_delay_seconds"; then log_and_error "$FUNC_NAME" "Kon idle-delay niet instellen."; return 1; fi; print_message success "GNOME idle-delay ingesteld op $idle_delay_seconds seconden."; log_action "Idle delay ingesteld ($idle_delay_seconds s)" "$FUNC_NAME"; return 0; }

# 21. Flatpak Permissies (ZEER RISICOVOL)
grant_flatpak_permissions() { local FUNC_NAME="grant_flatpak_permissions"; print_message error "*** BREDE FLATPAK PERMISSIES TOEKENNEN ***"; echo -e "${COLOR_BOLD_RED}WAARSCHUWING!!! ${COLOR_RED}Dit vernietigt Flatpak veiligheid! Geeft ALLE user Flatpaks VOLLEDIGE systeemtoegang!${COLOR_RESET}"; echo -e "${COLOR_PROMPT}Typ exact: ${COLOR_BOLD_WHITE}JA IK BEGRIJP HET RISICO${COLOR_RESET}"; read -p ": " confirmation_text; if [[ "$confirmation_text" != "JA IK BEGRIJP HET RISICO" ]]; then print_message warning "Bevestiging incorrect. Actie geannuleerd."; log_action "Actie geannuleerd (incorrecte bevestiging)" "$FUNC_NAME"; return 1; fi; print_message warning "Nogmaals, weet u het ZEKER?"; if ! ask_confirmation; then log_action "Actie geannuleerd (tweede bevestiging)" "$FUNC_NAME"; return 1; fi; local target_user=${SUDO_USER:-$(whoami)}; print_message info "Poging brede permissies voor alle user Flatpaks voor '$target_user'..."; local app_count=0; local error_count=0; local apps; mapfile -t apps < <(sudo -u "$target_user" flatpak list --app --columns=application); if [[ ${#apps[@]} -eq 0 ]]; then print_message warning "Geen user Flatpaks gevonden voor '$target_user'."; log_action "Geen user flatpaks gevonden" "$FUNC_NAME"; return 0; fi; for app in "${apps[@]}"; do ((app_count++)); print_message info "Override voor: $app"; if ! sudo -u "$target_user" flatpak override --user --filesystem=host --device=all --socket=wayland --socket=x11 --socket=pulseaudio --socket=system-bus --socket=session-bus --share=network "$app"; then print_message error "Kon override niet toepassen voor $app"; ((error_count++)); fi; done; if [[ $error_count -eq 0 ]]; then print_message success "Brede permissies toegepast op $app_count Flatpak(s)."; print_message warning "Flatpak veiligheid is nu ernstig gecompromitteerd!"; log_action "Brede permissies toegepast ($app_count apps)" "$FUNC_NAME" "RISICOVOL"; return 0; else log_and_error "$FUNC_NAME" "Fout bij toepassen permissies op $error_count van $app_count apps."; return 1; fi; }

# 22. Forceer Wayland voor Applicaties (Env Vars)
force_wayland_apps() { local FUNC_NAME="force_wayland_apps"; local env_file="/etc/environment"; print_message info "Forceren Wayland voor Firefox en Qt applicaties via $env_file..."; local moz_var="export MOZ_ENABLE_WAYLAND=1"; local qt_var="export QT_QPA_PLATFORM=wayland"; local changes_made=0; local write_ok=1; if ! grep -Fxq "$moz_var" "$env_file" 2>/dev/null; then print_message info "Toevoegen '$moz_var'..."; if ! echo "$moz_var" | sudo tee -a "$env_file" > /dev/null; then log_and_error "$FUNC_NAME" "Kon $moz_var niet toevoegen."; write_ok=0; else ((changes_made++)); fi; else print_message info "MOZ_ENABLE_WAYLAND=1 al ingesteld."; fi; if ! grep -Fxq "$qt_var" "$env_file" 2>/dev/null; then print_message info "Toevoegen '$qt_var'..."; if ! echo "$qt_var" | sudo tee -a "$env_file" > /dev/null; then log_and_error "$FUNC_NAME" "Kon $qt_var niet toevoegen."; write_ok=0; else ((changes_made++)); fi; else print_message info "QT_QPA_PLATFORM=wayland al ingesteld."; fi; if [[ $write_ok -eq 0 ]]; then return 1; fi; if [[ $changes_made -gt 0 ]]; then print_message success "Wayland omgevingsvariabelen toegevoegd/bijgewerkt."; print_message warning "EEN HERSTART IS NODIG."; log_action "Wayland env vars toegevoegd ($changes_made)" "$FUNC_NAME"; else print_message info "Geen wijzigingen nodig voor Wayland omgevingsvariabelen."; log_action "Wayland env vars al aanwezig" "$FUNC_NAME"; fi; return 0; }

# 23. AMD GPU Performance Tweaks (Env Vars)
apply_amd_tweaks() { local FUNC_NAME="apply_amd_tweaks"; print_message info "Toepassen AMD GPU performance tweaks (RADV ACO)..."; local GPU_VENDOR_LSPCI; GPU_VENDOR_LSPCI=$(lspci | grep -E 'VGA|3D' | head -n 1 | grep -o -E 'NVIDIA|AMD|Intel'); if [[ "$GPU_VENDOR_LSPCI" != "AMD" ]]; then print_message warning "Geen AMD GPU gedetecteerd. Overslaan."; log_action "Geen AMD GPU, overgeslagen" "$FUNC_NAME"; return 1; fi; local env_file="/etc/environment"; local perf_var="export RADV_PERFTEST=aco"; local changes_made=0; if grep -Fxq "$perf_var" "$env_file" 2>/dev/null; then print_message info "RADV_PERFTEST=aco al ingesteld."; else print_message info "Toevoegen '$perf_var'..."; if ! echo "$perf_var" | sudo tee -a "$env_file" > /dev/null; then log_and_error "$FUNC_NAME" "Kon $perf_var niet toevoegen."; return 1; else ((changes_made++)); fi; fi; if [[ $changes_made -gt 0 ]]; then print_message success "AMD performance tweak (ACO) variabele toegevoegd."; print_message warning "EEN HERSTART IS NODIG."; log_action "AMD tweak env var toegevoegd" "$FUNC_NAME"; else print_message info "Geen wijzigingen nodig voor AMD tweak variabele."; log_action "AMD tweak env var al aanwezig" "$FUNC_NAME"; fi; return 0; }

# 24. ZRAM Inschakelen
enable_zram() { local FUNC_NAME="enable_zram"; local conf_file="/etc/systemd/zram-generator.conf"; print_message info "ZRAM inschakelen voor snellere swap..."; print_message info "Installeren zram-generator pakket..."; if ! sudo dnf ${DNF_FLAGS} install zram-generator; then if rpm -q zram-generator > /dev/null 2>&1; then print_message info "zram-generator al geïnstalleerd."; log_action "zram-generator al geïnstalleerd" "$FUNC_NAME"; else log_and_error "$FUNC_NAME" "Kon zram-generator niet installeren."; return 1; fi; else log_action "zram-generator pakket geïnstalleerd" "$FUNC_NAME"; fi; if [[ -f "$conf_file" ]]; then print_message warning "Configuratiebestand $conf_file bestaat al. NIET overschreven."; log_action "Config bestand bestaat, overgeslagen" "$FUNC_NAME"; else print_message info "Aanmaken $conf_file..."; local zram_config="[zram0]\nzram-size = ram / 2\ncompression-algorithm = zstd"; if ! echo -e "$zram_config" | sudo tee "$conf_file" > /dev/null; then log_and_error "$FUNC_NAME" "Kon $conf_file niet aanmaken."; return 1; fi; print_message success "$conf_file aangemaakt."; log_action "Config bestand aangemaakt" "$FUNC_NAME"; fi; print_message info "ZRAM configuratie voltooid."; print_message warning "HERSTART of 'sudo systemctl restart systemd-zram-setup@zram0.service' nodig."; log_action "ZRAM configuratie voltooid, herstart nodig" "$FUNC_NAME"; return 0; }

# 25. Probeer DNF/RPM te Repareren
repair_dnf_rpm() { local FUNC_NAME="repair_dnf_rpm"; print_message warning "*** Poging tot DNF/RPM Reparatie ***"; print_message warning "Wist DNF cache & herbouwt RPM DB. Gebruik bij DNF fouten."; if ! ask_confirmation "DNF cache wissen en RPM DB herbouwen?"; then log_action "Reparatie geannuleerd" "$FUNC_NAME"; return 1; fi; local repair_ok=1; print_message info "1. DNF cache opschonen..."; if ! sudo dnf clean all; then log_and_error "$FUNC_NAME" "Fout bij 'dnf clean all'."; repair_ok=0; else log_action "dnf clean all" "$FUNC_NAME"; fi; print_message info "2. RPM database herbouwen..."; sudo rm -f /var/lib/rpm/__db*; if ! sudo rpm --rebuilddb; then log_and_error "$FUNC_NAME" "Fout bij 'rpm --rebuilddb'."; repair_ok=0; else log_action "rpm --rebuilddb" "$FUNC_NAME"; fi; print_message info "3. DNF metadata opnieuw genereren..."; if ! sudo dnf makecache; then log_and_error "$FUNC_NAME" "Fout bij 'dnf makecache' na rebuild."; repair_ok=0; else log_action "dnf makecache na rebuild" "$FUNC_NAME"; fi; if [[ $repair_ok -eq 1 ]]; then print_message success "DNF/RPM reparatiepoging voltooid."; else print_message error "Fouten opgetreden tijdens reparatie."; fi; return $repair_ok; }

# 26. Systeem Opschonen
cleanup_system() { local FUNC_NAME="cleanup_system"; print_message info "Systeem opschonen..."; local cleanup_ok=1; print_message info "DNF cache opschonen..."; sudo dnf clean all >/dev/null 2>&1; log_action "DNF cache gecleaned" "$FUNC_NAME"; print_message info "Ongebruikte afhankelijkheden controleren..."; local packages_to_autoremove; packages_to_autoremove=$(sudo dnf autoremove 2>/dev/null | grep -E '^Removing:|^Removing dependent packages:'); if [[ -n "$packages_to_autoremove" ]]; then echo "Voorgesteld voor verwijdering:"; echo "$packages_to_autoremove" | sed 's/^/  /'; if ask_confirmation "Doorgaan met autoremove?"; then if ! sudo dnf ${DNF_FLAGS} autoremove; then log_and_error "$FUNC_NAME" "Fout bij dnf autoremove."; cleanup_ok=0; else log_action "Autoremove uitgevoerd" "$FUNC_NAME"; fi; else log_action "Autoremove geannuleerd" "$FUNC_NAME"; return 1; fi; else print_message info "Geen ongebruikte pakketten gevonden."; log_action "Autoremove geen pakketten" "$FUNC_NAME"; fi; print_message info "Oude kernels controleren (behoud $KEEP_KERNELS)..."; local old_kernels; old_kernels=$(dnf repoquery --installonly --latest-limit=-${KEEP_KERNELS} -q); if [[ -n "$old_kernels" ]]; then print_message warning "Oude kernels voor verwijdering:"; echo "$old_kernels" | sed 's/^/  /'; if ask_confirmation "Oude kernels verwijderen?"; then if ! sudo dnf ${DNF_FLAGS} remove $old_kernels; then log_and_error "$FUNC_NAME" "Fout bij verwijderen oude kernels."; cleanup_ok=0; else log_action "Oude kernels verwijderd" "$FUNC_NAME"; fi; else log_action "Kernel verwijderen geannuleerd" "$FUNC_NAME"; return 1; fi; else print_message info "Geen oude kernels gevonden."; log_action "Geen oude kernels" "$FUNC_NAME"; fi; print_message info "Journal logs opschonen (~100MB)..."; if ! sudo journalctl --vacuum-size=100M; then print_message warning "Kon journal logs niet opschonen."; log_action "Journal vacuum mislukt" "$FUNC_NAME" "Mislukt (Warning)"; else log_action "Journal logs vacuumed" "$FUNC_NAME"; fi; if [[ $cleanup_ok -eq 1 ]]; then print_message success "Systeem opschonen voltooid."; else print_message error "Fouten opgetreden tijdens opschonen."; fi; return $cleanup_ok; }

# 27. Google Chrome Beheren
manage_google_chrome() { local FUNC_NAME="manage_google_chrome"; local target_user=${SUDO_USER:-$(whoami)}; local chrome_pkg="google-chrome-stable"; local chrome_repo_url="https://dl.google.com/linux/chrome/rpm/stable/x86_64"; local chrome_gpg_key="https://dl.google.com/linux/linux_signing_key.pub"; local chrome_repo_name="google-chrome"; print_message info "Google Chrome beheren..."; local result=0; if rpm -q "$chrome_pkg" > /dev/null 2>&1; then print_message success "Google Chrome ($chrome_pkg) is geïnstalleerd."; log_action "Chrome geïnstalleerd check" "$FUNC_NAME"; if ask_confirmation "Optimaliseren voor Wayland/prestaties?"; then local desktop_file_system="/usr/share/applications/google-chrome.desktop"; local target_home; target_home=$(eval echo ~$target_user); local desktop_file_user_dir="${target_home}/.local/share/applications"; local desktop_file_user="${desktop_file_user_dir}/google-chrome.desktop"; print_message info "Kopiëren system .desktop naar $desktop_file_user..."; sudo -u "$target_user" mkdir -p "$desktop_file_user_dir"; if ! sudo -u "$target_user" cp "$desktop_file_system" "$desktop_file_user"; then log_and_error "$FUNC_NAME" "Kon $desktop_file_system niet kopiëren."; result=1; else log_action "User desktop file gekopieerd" "$FUNC_NAME"; local chrome_flags=" --enable-features=UseOzonePlatform --ozone-platform=wayland"; print_message info "Toevoegen Wayland flags aan $desktop_file_user..."; if ! sudo -u "$target_user" sed -i -E "s|^(Exec=.*google-chrome-stable)(.*)$|\1${chrome_flags}\2|g" "$desktop_file_user"; then log_and_error "$FUNC_NAME" "Kon flags niet toevoegen aan $desktop_file_user."; result=1; else print_message success "Flags toegevoegd aan user .desktop file."; log_action "Chrome flags toegevoegd ($chrome_flags)" "$FUNC_NAME"; print_message info "Updaten user desktop database..."; sudo -u "$target_user" update-desktop-database "$desktop_file_user_dir" > /dev/null 2>&1; print_message info "Chrome optimalisatie voltooid. Start Chrome opnieuw."; fi; fi; else log_action "Chrome optimalisatie overgeslagen" "$FUNC_NAME"; result=1; fi; else print_message warning "Google Chrome ($chrome_pkg) is NIET geïnstalleerd."; log_action "Chrome niet geïnstalleerd check" "$FUNC_NAME"; if ask_confirmation "Google Chrome nu installeren (voegt Google repo toe)?"; then print_message info "Google Chrome repository toevoegen..."; if sudo dnf config-manager --add-repo "$chrome_repo_url" > /dev/null 2>&1 && sudo rpm --import "$chrome_gpg_key"; then print_message success "Google Chrome repository toegevoegd."; log_action "Google Chrome repo toegevoegd" "$FUNC_NAME"; print_message info "Installeren $chrome_pkg..."; if sudo dnf install ${DNF_FLAGS} "$chrome_pkg"; then print_message success "$chrome_pkg geïnstalleerd."; log_action "Chrome geïnstalleerd" "$FUNC_NAME"; manage_google_chrome; result=$?; else log_and_error "$FUNC_NAME" "Kon $chrome_pkg niet installeren."; result=1; fi; else log_and_error "$FUNC_NAME" "Kon Google Chrome repository niet toevoegen."; result=1; fi; else log_action "Chrome installatie overgeslagen" "$FUNC_NAME"; result=1; fi; fi; return $result; }

# 28. DNF Max Parallel Downloads Aanpassen
configure_dnf_downloads() { local FUNC_NAME="configure_dnf_downloads"; local dnf_conf="/etc/dnf/dnf.conf"; local target_value=6; local setting="max_parallel_downloads"; print_message info "Aanpassen DNF max_parallel_downloads naar $target_value..."; if [[ ! -f "$dnf_conf" ]]; then print_message warning "$dnf_conf niet gevonden. Aanmaken..."; if ! echo "[main]" | sudo tee "$dnf_conf" > /dev/null; then log_and_error "$FUNC_NAME" "Kon $dnf_conf niet aanmaken"; return 1; fi; fi; if ! grep -q "\[main\]" "$dnf_conf"; then print_message info "[main] sectie niet gevonden. Toevoegen..."; if ! echo -e "\n[main]" | sudo tee -a "$dnf_conf" > /dev/null; then log_and_error "$FUNC_NAME" "Kon [main] niet toevoegen."; return 1; fi; fi; if grep -Eq "^\s*${setting}\s*=\s*${target_value}\s*$" "$dnf_conf"; then print_message info "$setting al ingesteld op $target_value."; log_action "$setting al correct ($target_value)" "$FUNC_NAME"; return 0; fi; if ! sudo awk -v s="$setting" 'BEGIN { m=0 } /\[main\]/ { m=1; print; next } /\[.*\]/ { m=0 } m && $1 == s { next } { print }' "$dnf_conf" > /tmp/dnf.conf.tmp || ! sudo mv /tmp/dnf.conf.tmp "$dnf_conf"; then log_and_error "$FUNC_NAME" "Kon $dnf_conf niet aanpassen (oude regel)."; rm -f /tmp/dnf.conf.tmp; return 1; fi; log_action "Oude $setting verwijderd (indien aanwezig)" "$FUNC_NAME"; print_message info "Instellen $setting=$target_value..."; if ! sudo sed -i "/\[main\]/a ${setting}=${target_value}" "$dnf_conf"; then log_and_error "$FUNC_NAME" "Kon $setting=$target_value niet instellen."; return 1; fi; print_message success "DNF $setting ingesteld op $target_value."; log_action "$setting ingesteld op $target_value" "$FUNC_NAME"; return 0; }

# 29. Mutter Check-Alive Timeout Aanpassen
configure_mutter_timeout() { local FUNC_NAME="configure_mutter_timeout"; local timeout_ms=30000; local schema="org.gnome.mutter"; local key="check-alive-timeout"; print_message info "Aanpassen Mutter check-alive-timeout naar ${timeout_ms}ms..."; if ! is_gnome_desktop; then print_message warning "GNOME niet gedetecteerd. Overslaan."; log_action "Geen GNOME, overgeslagen" "$FUNC_NAME"; return 1; fi; if ! run_gsettings_as_user "$schema" "$key" "$timeout_ms"; then log_and_error "$FUNC_NAME" "Kon $key niet instellen."; return 1; fi; print_message success "Mutter $key ingesteld op $timeout_ms ms."; print_message info "Wijziging is direct actief."; log_action "$key ingesteld ($timeout_ms ms)" "$FUNC_NAME"; return 0; }

# 30. Wayland Fractional Scaling Inschakelen
enable_wayland_fractional_scaling() { local FUNC_NAME="enable_wayland_fractional_scaling"; local schema="org.gnome.mutter"; local key="experimental-features"; local value="['scale-monitor-framebuffer']"; print_message info "Inschakelen Wayland fractional scaling (experimenteel)..."; if ! is_gnome_desktop; then print_message warning "GNOME niet gedetecteerd. Overslaan."; log_action "Geen GNOME, overgeslagen" "$FUNC_NAME"; return 1; fi; if ! run_gsettings_as_user "$schema" "$key" "$value"; then log_and_error "$FUNC_NAME" "Kon $key niet instellen."; return 1; fi; print_message success "Mutter $key ingesteld."; print_message info "Herstart GNOME Shell (Alt+F2, r, Enter) of log opnieuw in."; print_message warning "X11 fractional scaling vereist gepatchte Mutter (zie optie 32)."; log_action "$key ingesteld ($value)" "$FUNC_NAME"; return 0; }

# 31. Mesa-git Vulkan Drivers Installeren (RISICOVOL)
install_mesa_git() { local FUNC_NAME="install_mesa_git"; print_message error "*** Mesa-git Vulkan Drivers Installeren (EXPERIMENTEEL & RISICOVOL) ***"; echo -e "${COLOR_BOLD_RED}WAARSCHUWING!!! ${COLOR_YELLOW}Vervangt stabiele drivers! Vereist externe COPR (${COLOR_CYAN}${MESA_GIT_COPR}${COLOR_YELLOW}). ${COLOR_BOLD_RED}VERIFIEER COPR!${COLOR_YELLOW} Kan systeem breken! Terugdraaien: 'sudo dnf distro-sync'."; echo -e "${COLOR_RESET}"; if ! ask_confirmation "ABSOLUUT ZEKER Mesa-git installeren via COPR ${MESA_GIT_COPR}?"; then log_action "Actie geannuleerd door gebruiker" "$FUNC_NAME"; return 1; fi; print_message info "Inschakelen COPR: ${MESA_GIT_COPR}..."; if ! sudo dnf copr enable -y "${MESA_GIT_COPR}"; then log_and_error "$FUNC_NAME" "Kon COPR ${MESA_GIT_COPR} niet inschakelen."; return 1; fi; log_action "COPR ${MESA_GIT_COPR} ingeschakeld" "$FUNC_NAME"; local stable_pkg="mesa-vulkan-drivers"; local git_pkg="mesa-vulkan-drivers"; if dnf list available --enablerepo="copr:copr.fedorainfracloud.org:${MESA_GIT_COPR}" | grep -q "mesa-vulkan-drivers-git"; then git_pkg="mesa-vulkan-drivers-git"; fi; local dnf_cmd_success=0; if [[ "$stable_pkg" == "$git_pkg" ]]; then print_message info "COPR lijkt $stable_pkg direct te overschrijven. Uitvoeren 'dnf update'..."; if sudo dnf update -y --enablerepo="copr:copr.fedorainfracloud.org:${MESA_GIT_COPR}" --refresh --best --allowerasing; then print_message success "Mesa Vulkan drivers bijgewerkt vanuit COPR."; log_action "Mesa Vulkan drivers bijgewerkt vanuit COPR" "$FUNC_NAME" "RISICOVOL"; dnf_cmd_success=1; else log_and_error "$FUNC_NAME" "Kon Mesa Vulkan drivers niet bijwerken vanuit COPR."; fi; else print_message info "Vervangen van $stable_pkg door $git_pkg..."; if sudo dnf swap -y "$stable_pkg" "$git_pkg" --enablerepo="copr:copr.fedorainfracloud.org:${MESA_GIT_COPR}" --best --allowerasing; then print_message success "Mesa Vulkan drivers vervangen door $git_pkg."; log_action "Mesa Vulkan drivers vervangen door $git_pkg" "$FUNC_NAME" "RISICOVOL"; dnf_cmd_success=1; else log_and_error "$FUNC_NAME" "Kon $stable_pkg niet vervangen door $git_pkg."; fi; fi; if [[ $dnf_cmd_success -eq 1 ]]; then print_message warning "Mesa-git Vulkan drivers geïnstalleerd. ${COLOR_BOLD_RED}EEN HERSTART IS NU VEREIST!${COLOR_RESET}"; print_message warning "Terugdraaien via 'sudo dnf distro-sync' (na uitschakelen COPR)."; return 0; else print_message warning "Installatie/Update mislukt. Probeer COPR uit te schakelen en 'sudo dnf distro-sync'."; return 1; fi; }

# 32. Info over Gepatchte Componenten
info_patched_components() { local FUNC_NAME="info_patched_components"; print_message info "*** Informatie over Gepatchte Systeemcomponenten ***"; echo -e "${COLOR_YELLOW}Mutter VRR, Mutter X11 Frac. Scaling, Shell Ext. Update, XWayland FPS Fix vereisen gepatchte componenten."; echo -e "${COLOR_BOLD_RED}Dit script past deze patches NIET toe (te riskant/complex).${COLOR_RESET}"; echo -e "${COLOR_YELLOW}Opties:${COLOR_WHITE} Zoek betrouwbare COPRs, gebruik distro met patches (bv. Nobara), of bouw zelf."; log_action "Info getoond over gepatchte componenten" "$FUNC_NAME"; return 0; }


# --- Menu Functies ---
show_system_info() { print_message info "--- Systeem Informatie ---"; echo "Hostname: $(hostnamectl hostname)"; echo "OS: $(hostnamectl status | grep 'Operating System' | cut -d: -f2- | xargs)"; echo "Kernel: $(uname -r)"; if [ -f /etc/os-release ]; then echo "OS Details:"; cat /etc/os-release | grep PRETTY_NAME | cut -d= -f2- | sed 's/"//g; s/^/  /'; fi; local session_type="${XDG_SESSION_TYPE:-N/A}"; local de="${XDG_CURRENT_DESKTOP:-N/A}"; echo "Desktop Omgeving: $de"; echo "Sessie Type: $session_type"; echo "Uptime: $(uptime -p)"; echo "--- Hardware ---"; echo "CPU: $(lscpu | grep 'Model name:' | cut -d: -f2- | xargs)"; echo "RAM: $(free -h | grep Mem | awk '{print $2}')"; echo "GPU:"; lspci -k | grep -A 3 -E 'VGA|3D' | sed 's/^/  /'; echo "Schijfruimte:"; df -hT -x tmpfs -x devtmpfs -x squashfs | sed '1 s/^/  /; 2,\$ s/^/  /'; echo "--- Netwerk ---"; echo "IP Adressen:"; ip -4 a | grep 'inet ' | grep -v '127.0.0.1' | awk '{print "  "$2}'; echo "DNS (NM):"; if command -v nmcli > /dev/null 2>&1; then nmcli dev show | grep IP4.DNS | sed 's/^/  /' || echo "  (Kon NM DNS niet ophalen)"; else echo "  (nmcli niet gevonden)"; fi; echo "--- Firewall (firewalld) ---"; if command -v firewall-cmd > /dev/null 2>&1 && systemctl is-active firewalld > /dev/null 2>&1; then local default_zone=$(sudo firewall-cmd --get-default-zone); echo "Status: Actief, Zone: $default_zone"; echo "Permanente regels ($default_zone):"; sudo firewall-cmd --list-all --zone="$default_zone" --permanent | sed 's/^/  /'; else echo "Status: Inactief/niet geïnstalleerd"; fi; echo "--- SSD TRIM ---"; if systemctl is-enabled fstrim.timer >/dev/null 2>&1; then echo "fstrim.timer Status: Ingeschakeld (actief: $(systemctl is-active fstrim.timer))"; else echo "fstrim.timer Status: Uitgeschakeld"; fi; print_message info "--- Einde Systeem Informatie ---"; }
view_applied_optimizations() { print_message info "--- Logboek ($LOG_FILE) ---"; if [[ -f "$LOG_FILE" ]]; then cat "$LOG_FILE"; else print_message warning "Logbestand niet gevonden."; fi; print_message info "--- Einde Logboek ---"; }
revert_optimizations() { print_message warning "--- Optimalisaties Terugdraaien (Zeer Beperkte Functie) ---"; print_message warning "${COLOR_BOLD_RED}NIET teruggedraaid:${COLOR_YELLOW} Updates, Pakketten (Fonts, Conda, Chrome, Papirus, Mesa-git etc.), Firmware, Firewall,"; print_message warning "Gsettings, Slaap mask, Env vars, ZRAM, Chrome tweaks, DNF conf."; print_message warning "${COLOR_YELLOW}Hints:${COLOR_WHITE} Mesa-git: Deactiveer COPR & 'sudo dnf distro-sync'. Gsettings: 'gsettings reset ...'."; if ! ask_confirmation "Doorgaan met terugdraaien enkele basisinstellingen?"; then return 1; fi; local revert_ok=1; local current_user=${SUDO_USER:-$(whoami)}; local fish_path=$(which fish 2>/dev/null); if [[ -n "$fish_path" ]]; then local current_shell=$(getent passwd "$current_user" | cut -d: -f7); if [[ "$current_shell" == "$fish_path" ]]; then print_message info "Shell terugzetten naar /bin/bash..."; if ! sudo usermod -s /bin/bash "$current_user"; then print_message error "Kon shell niet terugzetten."; log_action "FishShellRevertMislukt" "Revert" "Mislukt"; revert_ok=0; else log_action "FishShellTeruggezet" "Revert"; fi; fi; fi; local sysctl_conf="/etc/sysctl.d/99-network-optimize.conf"; if [[ -f "$sysctl_conf" ]]; then print_message info "Netwerk sysctl verwijderen..."; if ! sudo rm -f "$sysctl_conf"; then print_message error "Kon $sysctl_conf niet verwijderen."; log_action "NetwerkSysctlVerwijderenMislukt" "Revert" "Mislukt"; revert_ok=0; else sudo sysctl --system >/dev/null 2>&1; log_action "NetwerkSysctlVerwijderd" "Revert"; fi; fi; local nm_conf_file="/etc/NetworkManager/conf.d/99-custom-dns.conf"; if [[ -f "$nm_conf_file" ]]; then print_message info "Custom DNS config verwijderen..."; if ! sudo rm -f "$nm_conf_file"; then print_message error "Kon $nm_conf_file niet verwijderen."; log_action "DNSConfigVerwijderenMislukt" "Revert" "Mislukt"; revert_ok=0; else sudo systemctl reload NetworkManager >/dev/null 2>&1; log_action "DNSConfigVerwijderd" "Revert"; fi; fi; if systemctl is-enabled fstrim.timer > /dev/null 2>&1; then print_message info "fstrim.timer uitschakelen..."; if ! sudo systemctl disable --now fstrim.timer >/dev/null 2>&1; then print_message error "Kon fstrim.timer niet uitschakelen."; log_action "FstrimTimerUitschakelenMislukt" "Revert" "Mislukt"; revert_ok=0; else log_action "FstrimTimerUitgeschakeld" "Revert"; fi; fi; if systemctl is-enabled preload.service > /dev/null 2>&1; then print_message info "Preload service uitschakelen..."; if ! sudo systemctl disable --now preload.service >/dev/null 2>&1; then print_message error "Kon Preload niet uitschakelen."; log_action "PreloadUitschakelenMislukt" "Revert" "Mislukt"; revert_ok=0; else log_action "PreloadUitgeschakeld" "Revert"; fi; fi; if [[ $revert_ok -eq 1 ]]; then print_message success "Poging tot terugdraaien basisinstellingen voltooid."; else print_message error "Fouten opgetreden tijdens terugdraaien."; fi; return $revert_ok; }
show_menu() { clear; print_header "Fedora Optimalisatie Suite v7.4"; print_section_header "Basis Setup & Updates"; print_menu_item "1" "Systeem Update & Essent. Tools"; print_menu_item "2" "RPM Fusion Repositories"; print_menu_item "3" "Multimedia Codecs (Audio/Video/HEIC)"; print_menu_item "4" "Printerondersteuning & Kwaliteit Info"; print_menu_item "8" "Drivers & Firmware Bijwerken"; print_menu_item "9" "GPU Drivers Install/Check"; print_separator; print_section_header "Prestatie & Optimalisatie"; print_menu_item "6" "SSD Optimalisatie (TRIM Timer)"; print_menu_item "7" "Netwerk Optimalisatie (BBR+fq_codel)"; print_menu_item "10" "DNS Optimalisatie (Cloudflare/Google)"; print_menu_item "13" "Firewall Optimaliseren (Basis)"; print_menu_item "24" "ZRAM Inschakelen (Snellere Swap)"; print_menu_item "28" "DNF Parallel Downloads Verhogen (6)"; print_separator; print_section_header "Desktop & Applicatie Gedrag"; print_menu_item "5" "HDR Info & Wayland Check"; print_menu_item "14" "GNOME Basis Optimalisatie (Tweaks)"; print_menu_item "20" "GNOME Idle Delay (Scherm Uit)"; print_menu_item "22" "Forceer Wayland voor Apps (Firefox/Qt)"; print_menu_item "29" "Mutter Check-Alive Timeout Verhogen"; print_menu_item "30" "Wayland Fractional Scaling Inschakelen"; print_separator; print_section_header "Geavanceerde Grafische/Systeem Tweaks"; print_menu_item "23" "AMD GPU Perf Tweaks (ACO Env Var)"; print_menu_item "31" "Mesa-git Vulkan Drivers (${COLOR_BOLD_RED}RISICO!${COLOR_SECTION_HEADER})"; print_menu_item "32" "Info: Gepatchte Componenten (VRR, etc.)"; print_separator; print_section_header "Uiterlijk & Extra Software"; print_menu_item "11" "Extra Pakketten (preload, btrfs-assist)"; print_menu_item "15" "Fonts Installeren (MS Core, Noto)"; print_menu_item "17" "Papirus Icons & Oranje Mapkleur"; print_menu_item "27" "Google Chrome Beheren (Install/Optimize)"; print_menu_item "12" "Fish Shell als Standaard Instellen"; print_menu_item "16" "Conda (Miniconda) Installeren"; print_separator; print_section_header "Systeemgedrag & Risicovolle Acties"; print_menu_item "18" "PC Speaker Beep Uitschakelen"; print_menu_item "19" "Slaapstand Uitschakelen (${COLOR_BOLD_RED}RISICO!${COLOR_SECTION_HEADER})"; print_menu_item "21" "Flatpak Brede Permissies (${COLOR_BOLD_RED}EXTREEM RISICO!${COLOR_SECTION_HEADER})"; print_separator; print_section_header "Onderhoud & Script Acties"; print_menu_item "25" "Probeer DNF/RPM te Repareren"; print_menu_item "26" "Systeem Opschonen (Cache, Kernels)"; print_menu_item "A" "Veilige Optimalisaties Toepassen"; print_menu_item "E" "ALLES Toepassen (${COLOR_BOLD_RED}INCL. RISICO!${COLOR_SECTION_HEADER})"; print_menu_item "S" "Systeem Informatie Tonen"; print_menu_item "L" "Logboek Bekijken ($LOG_FILE)"; print_menu_item "R" "Terugdraaien (Zeer Beperkt!)"; print_menu_item "Q" "Script Afsluiten"; print_footer; echo -e "${COLOR_PROMPT}Voer uw keuze in: ${COLOR_RESET}\c"; read choice; }


# --- Hoofdlogica ---
check_root
while true; do
    show_menu

    last_exit_code=0 # Reset voor elke keuze

    case "$choice" in
        # Map keuzes naar functies (controleer nummering!)
        1) update_system; last_exit_code=$? ;; 2) enable_rpmfusion; last_exit_code=$? ;; 3) install_codecs; last_exit_code=$? ;; 4) install_printer_support; last_exit_code=$? ;;
        5) check_hdr_support; last_exit_code=$? ;; 6) optimize_ssd; last_exit_code=$? ;; 7) optimize_network; last_exit_code=$? ;; 8) update_drivers_firmware; last_exit_code=$? ;;
        9) install_gpu_drivers; last_exit_code=$? ;; 10) optimize_dns; last_exit_code=$? ;; 11) install_extra_packages; last_exit_code=$? ;; 12) set_fish_shell; last_exit_code=$? ;;
        13) optimize_firewall; last_exit_code=$? ;; 14) optimize_gnome_desktop; last_exit_code=$? ;; 15) install_fonts; last_exit_code=$? ;; 16) install_conda; last_exit_code=$? ;;
        17) install_papirus_icons; last_exit_code=$? ;; 18) disable_pc_beep; last_exit_code=$? ;; 19) disable_sleep_suspend; last_exit_code=$? ;; 20) configure_gnome_idle; last_exit_code=$? ;;
        21) grant_flatpak_permissions; last_exit_code=$? ;; 22) force_wayland_apps; last_exit_code=$? ;; 23) apply_amd_tweaks; last_exit_code=$? ;; 24) enable_zram; last_exit_code=$? ;;
        25) repair_dnf_rpm; last_exit_code=$? ;; 26) cleanup_system; last_exit_code=$? ;; 27) manage_google_chrome; last_exit_code=$? ;;
        28) configure_dnf_downloads; last_exit_code=$? ;; 29) configure_mutter_timeout; last_exit_code=$? ;; 30) enable_wayland_fractional_scaling; last_exit_code=$? ;;
        31) install_mesa_git; last_exit_code=$? ;; 32) info_patched_components; last_exit_code=$? ;;

        [aA]) # Veilige Optimalisaties Toepassen
            print_message info "Uitvoeren van een set relatief veilige optimalisaties..."
            local safe_steps=(1 2 3 4 6 7 8 9 10 11 13 14 15 17 18 20 22 23 24 26 27 28 29 30)
            local step_list=$(IFS=,; echo "${safe_steps[*]}")
            print_message info "(Stappen: $step_list)"
            print_message warning "(Slaat over: 5(Info), 12(Fish), 16(Conda), 19(Slaap!), 21(Flatpak!!), 25(Repair), 31(Mesa-Git!), 32(Info Patches))"
            if ask_confirmation "Weet u zeker dat u deze veilige optimalisaties wilt uitvoeren?"; then
                overall_success=1
                for step in "${safe_steps[@]}"; do
                    print_message info "--- [A] Uitvoeren Stap $step ---"
                    step_func_exit_code=0
                    case "$step" in # Map nummers naar functies
                         1) update_system ;; 2) enable_rpmfusion ;; 3) install_codecs ;; 4) install_printer_support ;;
                         6) optimize_ssd ;; 7) optimize_network ;; 8) update_drivers_firmware ;; 9) install_gpu_drivers ;;
                         10) optimize_dns ;; 11) install_extra_packages ;; 13) optimize_firewall ;; 14) optimize_gnome_desktop ;;
                         15) install_fonts ;; 17) install_papirus_icons ;; 18) disable_pc_beep ;; 20) configure_gnome_idle ;;
                         22) force_wayland_apps ;; 23) apply_amd_tweaks ;; 24) enable_zram ;; 26) cleanup_system ;;
                         27) manage_google_chrome ;; 28) configure_dnf_downloads ;; 29) configure_mutter_timeout ;; 30) enable_wayland_fractional_scaling ;;
                    esac
                    step_func_exit_code=$? # Pak exit code direct
                    if [[ "$step_func_exit_code" -ne 0 ]]; then
                         last_log_line=$(tail -n 1 "$LOG_FILE")
                         if [[ "$step_func_exit_code" -eq 1 && "$last_log_line" == *"Actie geannuleerd"* ]]; then
                              print_message warning "Stap $step geannuleerd door gebruiker. Stoppen met bulk actie."
                         else
                             print_message error "!!! Stap $step mislukt (Exit Code: $step_func_exit_code). Stoppen met bulk actie. !!!"
                         fi
                        overall_success=0
                        break # Stop de for loop bij de eerste fout of annulering
                    fi
                     print_message info "--- Stap $step voltooid ---"
                     sleep 0.5 # Kleine pauze tussen stappen
                done
                if [[ "$overall_success" -eq 1 ]]; then print_message success "Alle veilige optimalisaties succesvol voltooid!"; print_message warning "Mogelijk is een HERSTART nodig."; else print_message error "Een of meerdere stappen zijn mislukt/geannuleerd. Controleer log: $LOG_FILE"; fi
            else print_message warning "Bulk actie (Veilig) geannuleerd."; fi
            last_exit_code=0 # Reset exit code voor menu pauze
             ;; # Einde [aA]

        [eE]) # ALLES Toepassen (incl. Risico + Mesa-Git)
             print_message error "*** ALLES TOEPASSEN (INCLUSIEF RISICOVOLLE OPTIES) ***"
             local all_steps=(1 2 3 4 6 7 8 9 10 11 13 14 15 17 18 19 20 21 22 23 24 26 27 28 29 30 31)
             local step_list=$(IFS=,; echo "${all_steps[*]}")
             echo -e "${COLOR_BOLD_RED}WAARSCHUWING:${COLOR_YELLOW} Omvat Slaapstand Uit(19), Flatpak Perms(21), Mesa-git(31)! Weet ABSOLUUT ZEKER wat u doet!"
             print_message info "(Stappen: $step_list)"
             echo -e "${COLOR_PROMPT}Typ exact ${COLOR_BOLD_WHITE}JA IK ACCEPTEER ALLE RISICOS${COLOR_RESET} om door te gaan:"
             read -p ": " confirmation_text_e
             if [[ "$confirmation_text_e" != "JA IK ACCEPTEER ALLE RISICOS" ]]; then print_message warning "Bevestiging incorrect. Actie 'Alles Toepassen' geannuleerd."; last_exit_code=1; else
                 print_message info "Laatste controle: Doorgaan met ALLE stappen?"
                 if ask_confirmation; then
                    overall_success_e=1
                    print_message info "Starten met uitvoeren van ALLE geselecteerde stappen..."
                    sleep 1 # Kleine pauze
                    for step in "${all_steps[@]}"; do
                        print_message info "--- [E] Uitvoeren Stap $step ---"
                        step_func_exit_code_e=0
                        case "$step" in
                             1) update_system ;; 2) enable_rpmfusion ;; 3) install_codecs ;; 4) install_printer_support ;;
                             6) optimize_ssd ;; 7) optimize_network ;; 8) update_drivers_firmware ;; 9) install_gpu_drivers ;;
                             10) optimize_dns ;; 11) install_extra_packages ;; 13) optimize_firewall ;; 14) optimize_gnome_desktop ;;
                             15) install_fonts ;; 17) install_papirus_icons ;; 18) disable_pc_beep ;; 19) disable_sleep_suspend ;;
                             20) configure_gnome_idle ;; 21) grant_flatpak_permissions ;; 22) force_wayland_apps ;; 23) apply_amd_tweaks ;;
                             24) enable_zram ;; 26) cleanup_system ;; 27) manage_google_chrome ;;
                             28) configure_dnf_downloads ;; 29) configure_mutter_timeout ;; 30) enable_wayland_fractional_scaling ;; 31) install_mesa_git ;;
                             *) print_message warning "Onbekende stap $step in 'Alles Toepassen' lijst."; continue ;;
                        esac
                        step_func_exit_code_e=$? # Pak exit code direct
                        if [[ "$step_func_exit_code_e" -ne 0 ]]; then
                             last_log_line=$(tail -n 1 "$LOG_FILE") # Check log voor annulering marker
                             if [[ "$step_func_exit_code_e" -eq 1 && "$last_log_line" == *"Actie geannuleerd"* ]]; then
                                 print_message warning "Stap $step overgeslagen/geannuleerd door gebruiker. Doorgaan..."
                                 # Ga door met de volgende stap
                             else
                                 print_message error "!!! Stap $step mislukt (Exit Code: $step_func_exit_code_e). Stoppen met 'Alles Toepassen'. !!!"
                                 overall_success_e=0; break; # Stop de loop bij echte fout
                             fi
                        else
                             print_message info "--- Stap $step voltooid ---"
                             sleep 0.5 # Kleine pauze tussen stappen
                        fi
                    done # Einde for loop
                    if [[ "$overall_success_e" -eq 1 ]]; then print_message success "'Alles Toepassen' voltooid (met mogelijke annuleringen)."; print_message warning "${COLOR_BOLD_RED}HERSTART wordt ZEER sterk aanbevolen!${COLOR_RESET}"; else print_message error "Een of meerdere stappen zijn mislukt tijdens 'Alles Toepassen'. Controleer log: $LOG_FILE"; fi
                else print_message warning "Bulk actie (Alles) geannuleerd."; last_exit_code=1; fi # Geannuleerd bij 2e prompt
             fi # Einde check confirmation_text_e
             ;; # Einde [eE]

        [sS]) show_system_info; last_exit_code=$? ;;
        [lL]) view_applied_optimizations; last_exit_code=$? ;;
        [rR]) revert_optimizations; last_exit_code=$? ;;
        [qQ]) print_message info "Script wordt afgesloten."; print_footer; exit 0 ;;
        *) print_message error "Ongeldige keuze '$choice'."; last_exit_code=1 ;;
    esac

    # Pauze na de meeste acties, behalve na ongeldige keuze of annulering (exit code != 0)
    # Of na bulk acties die hun eigen prompt hebben
    if [[ "$last_exit_code" -eq 0 && ! "$choice" =~ ^[aAeE]$ ]] ; then
        echo -e "\n${COLOR_PROMPT}Druk op Enter om terug te keren naar het menu...${COLOR_RESET}"
        read -r
    elif [[ "$last_exit_code" -ne 0 && ! "$choice" =~ ^[aAeE]$ ]] ; then
         # Wacht even na een fout of annulering
         sleep 2
    fi
    # Na bulk acties (a/A/e/E) is er al een prompt/wacht, dus hier niets extra doen.

done